CCS PCM C Compiler, Version 5.007, 61971               28-Haz-21 09:31

               Filename:   C:\Users\ALTINIÞIK\Documents\projj.lst

               ROM used:   1674 words (20%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           42 (11%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4FB
0003:  NOP
.................... #include <projj.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8C,29
000D:  DATA E9,31
000E:  DATA E1,35
000F:  DATA EC,34
0010:  DATA EB,1E
0011:  DATA 00,00
*
015A:  MOVF   0B,W
015B:  MOVWF  2B
015C:  BCF    0B.7
015D:  BSF    03.5
015E:  BSF    03.6
015F:  BSF    0C.7
0160:  BSF    0C.0
0161:  NOP
0162:  NOP
0163:  BCF    03.5
0164:  MOVF   0C,W
0165:  ANDLW  7F
0166:  BTFSC  03.2
0167:  GOTO   1A1
0168:  BCF    03.6
0169:  MOVWF  2C
016A:  BSF    03.6
016B:  MOVF   0D,W
016C:  BCF    03.6
016D:  MOVWF  2D
016E:  BSF    03.6
016F:  MOVF   0F,W
0170:  BCF    03.6
0171:  MOVWF  2E
0172:  MOVF   2C,W
0173:  MOVWF  38
0174:  CALL   12E
0175:  MOVF   2D,W
0176:  BSF    03.6
0177:  MOVWF  0D
0178:  BCF    03.6
0179:  MOVF   2E,W
017A:  BSF    03.6
017B:  MOVWF  0F
017C:  BSF    03.5
017D:  BSF    0C.7
017E:  BSF    0C.0
017F:  NOP
0180:  NOP
0181:  BCF    03.5
0182:  RLF    0C,W
0183:  RLF    0E,W
0184:  ANDLW  7F
0185:  BTFSC  03.2
0186:  GOTO   1A1
0187:  BCF    03.6
0188:  MOVWF  2C
0189:  BSF    03.6
018A:  MOVF   0D,W
018B:  BCF    03.6
018C:  MOVWF  2D
018D:  BSF    03.6
018E:  MOVF   0F,W
018F:  BCF    03.6
0190:  MOVWF  2E
0191:  MOVF   2C,W
0192:  MOVWF  38
0193:  CALL   12E
0194:  MOVF   2D,W
0195:  BSF    03.6
0196:  MOVWF  0D
0197:  BCF    03.6
0198:  MOVF   2E,W
0199:  BSF    03.6
019A:  MOVWF  0F
019B:  INCF   0D,F
019C:  BTFSC  03.2
019D:  INCF   0F,F
019E:  BCF    03.6
019F:  GOTO   15D
01A0:  BSF    03.6
01A1:  BCF    03.6
01A2:  BTFSC  2B.7
01A3:  BSF    0B.7
01A4:  BCF    0A.3
01A5:  BCF    0A.4
01A6:  GOTO   564 (RETURN)
01A7:  MOVLW  8E
01A8:  MOVWF  77
01A9:  MOVF   2C,W
01AA:  MOVWF  78
01AB:  MOVF   2B,W
01AC:  MOVWF  79
01AD:  CLRF   7A
01AE:  MOVF   78,F
01AF:  BTFSS  03.2
01B0:  GOTO   1BB
01B1:  MOVF   79,W
01B2:  MOVWF  78
01B3:  CLRF   79
01B4:  MOVLW  08
01B5:  SUBWF  77,F
01B6:  MOVF   78,F
01B7:  BTFSS  03.2
01B8:  GOTO   1BB
01B9:  CLRF   77
01BA:  GOTO   1C3
01BB:  BCF    03.0
01BC:  BTFSC  78.7
01BD:  GOTO   1C2
01BE:  RLF    79,F
01BF:  RLF    78,F
01C0:  DECF   77,F
01C1:  GOTO   1BB
01C2:  BCF    78.7
01C3:  BCF    0A.3
01C4:  BCF    0A.4
01C5:  GOTO   572 (RETURN)
01C6:  MOVF   38,W
01C7:  BTFSC  03.2
01C8:  GOTO   236
01C9:  MOVWF  40
01CA:  MOVF   3C,W
01CB:  BTFSC  03.2
01CC:  GOTO   236
01CD:  ADDWF  40,F
01CE:  BTFSC  03.0
01CF:  GOTO   1D7
01D0:  MOVLW  7F
01D1:  SUBWF  40,F
01D2:  BTFSS  03.0
01D3:  GOTO   236
01D4:  BTFSC  03.2
01D5:  GOTO   236
01D6:  GOTO   1DB
01D7:  MOVLW  81
01D8:  ADDWF  40,F
01D9:  BTFSC  03.0
01DA:  GOTO   236
01DB:  MOVF   40,W
01DC:  MOVWF  77
01DD:  CLRF   78
01DE:  CLRF   79
01DF:  CLRF   7A
01E0:  MOVF   39,W
01E1:  MOVWF  44
01E2:  BSF    44.7
01E3:  MOVF   3A,W
01E4:  MOVWF  43
01E5:  MOVF   3B,W
01E6:  MOVWF  42
01E7:  MOVLW  18
01E8:  MOVWF  40
01E9:  CLRF   41
01EA:  BTFSS  42.0
01EB:  GOTO   204
01EC:  MOVF   3F,W
01ED:  ADDWF  7A,F
01EE:  BTFSS  03.0
01EF:  GOTO   1F6
01F0:  INCF   79,F
01F1:  BTFSS  03.2
01F2:  GOTO   1F6
01F3:  INCF   78,F
01F4:  BTFSC  03.2
01F5:  BSF    41.7
01F6:  MOVF   3E,W
01F7:  ADDWF  79,F
01F8:  BTFSS  03.0
01F9:  GOTO   1FD
01FA:  INCF   78,F
01FB:  BTFSC  03.2
01FC:  BSF    41.7
01FD:  MOVF   3D,W
01FE:  MOVWF  3A
01FF:  BSF    3A.7
0200:  MOVF   3A,W
0201:  ADDWF  78,F
0202:  BTFSC  03.0
0203:  BSF    41.7
0204:  RLF    41,F
0205:  RRF    78,F
0206:  RRF    79,F
0207:  RRF    7A,F
0208:  RRF    44,F
0209:  RRF    43,F
020A:  RRF    42,F
020B:  BCF    03.0
020C:  DECFSZ 40,F
020D:  GOTO   1E9
020E:  MOVLW  01
020F:  ADDWF  77,F
0210:  BTFSC  03.0
0211:  GOTO   236
0212:  BTFSC  78.7
0213:  GOTO   21B
0214:  RLF    44,F
0215:  RLF    7A,F
0216:  RLF    79,F
0217:  RLF    78,F
0218:  DECF   77,F
0219:  BTFSC  03.2
021A:  GOTO   236
021B:  BTFSS  44.7
021C:  GOTO   22C
021D:  INCF   7A,F
021E:  BTFSS  03.2
021F:  GOTO   22C
0220:  INCF   79,F
0221:  BTFSS  03.2
0222:  GOTO   22C
0223:  INCF   78,F
0224:  BTFSS  03.2
0225:  GOTO   22C
0226:  RRF    78,F
0227:  RRF    79,F
0228:  RRF    7A,F
0229:  INCF   77,F
022A:  BTFSC  03.2
022B:  GOTO   236
022C:  MOVF   39,W
022D:  MOVWF  41
022E:  MOVF   3D,W
022F:  XORWF  41,F
0230:  BTFSS  41.7
0231:  GOTO   234
0232:  BSF    78.7
0233:  GOTO   23A
0234:  BCF    78.7
0235:  GOTO   23A
0236:  CLRF   77
0237:  CLRF   78
0238:  CLRF   79
0239:  CLRF   7A
023A:  RETURN
023B:  MOVLW  80
023C:  BTFSC  03.1
023D:  XORWF  34,F
023E:  CLRF   39
023F:  CLRF   3A
0240:  MOVF   30,W
0241:  MOVWF  38
0242:  MOVF   34,W
0243:  XORWF  38,F
0244:  MOVF   2F,W
0245:  BTFSC  03.2
0246:  GOTO   32B
0247:  MOVWF  37
0248:  MOVWF  77
0249:  MOVF   33,W
024A:  BTFSC  03.2
024B:  GOTO   334
024C:  SUBWF  37,F
024D:  BTFSC  03.2
024E:  GOTO   2D0
024F:  BTFSS  03.0
0250:  GOTO   28E
0251:  MOVF   34,W
0252:  MOVWF  3D
0253:  BSF    3D.7
0254:  MOVF   35,W
0255:  MOVWF  3C
0256:  MOVF   36,W
0257:  MOVWF  3B
0258:  CLRF   3A
0259:  BCF    03.0
025A:  RRF    3D,F
025B:  RRF    3C,F
025C:  RRF    3B,F
025D:  RRF    3A,F
025E:  DECFSZ 37,F
025F:  GOTO   258
0260:  BTFSS  38.7
0261:  GOTO   265
0262:  BSF    39.0
0263:  GOTO   348
0264:  BCF    39.0
0265:  BCF    37.0
0266:  BSF    39.4
0267:  MOVLW  32
0268:  MOVWF  04
0269:  BCF    03.7
026A:  GOTO   35D
026B:  BCF    39.4
026C:  BTFSC  38.7
026D:  GOTO   278
026E:  BTFSS  37.0
026F:  GOTO   283
0270:  RRF    3D,F
0271:  RRF    3C,F
0272:  RRF    3B,F
0273:  RRF    3A,F
0274:  INCF   77,F
0275:  BTFSC  03.2
0276:  GOTO   343
0277:  GOTO   283
0278:  BTFSC  3D.7
0279:  GOTO   286
027A:  BCF    03.0
027B:  RLF    3A,F
027C:  RLF    3B,F
027D:  RLF    3C,F
027E:  RLF    3D,F
027F:  DECF   77,F
0280:  BTFSC  03.2
0281:  GOTO   343
0282:  GOTO   278
0283:  BSF    39.6
0284:  GOTO   2F0
0285:  BCF    39.6
0286:  MOVF   30,W
0287:  MOVWF  38
0288:  BTFSS  38.7
0289:  GOTO   28C
028A:  BSF    3D.7
028B:  GOTO   33C
028C:  BCF    3D.7
028D:  GOTO   33C
028E:  MOVF   33,W
028F:  MOVWF  37
0290:  MOVWF  77
0291:  MOVF   2F,W
0292:  SUBWF  37,F
0293:  MOVF   30,W
0294:  MOVWF  3D
0295:  BSF    3D.7
0296:  MOVF   31,W
0297:  MOVWF  3C
0298:  MOVF   32,W
0299:  MOVWF  3B
029A:  CLRF   3A
029B:  BCF    03.0
029C:  RRF    3D,F
029D:  RRF    3C,F
029E:  RRF    3B,F
029F:  RRF    3A,F
02A0:  DECFSZ 37,F
02A1:  GOTO   29A
02A2:  BTFSS  38.7
02A3:  GOTO   2A7
02A4:  BSF    39.1
02A5:  GOTO   348
02A6:  BCF    39.1
02A7:  BCF    37.0
02A8:  BSF    39.5
02A9:  MOVLW  36
02AA:  MOVWF  04
02AB:  BCF    03.7
02AC:  GOTO   35D
02AD:  BCF    39.5
02AE:  BTFSC  38.7
02AF:  GOTO   2BA
02B0:  BTFSS  37.0
02B1:  GOTO   2C5
02B2:  RRF    3D,F
02B3:  RRF    3C,F
02B4:  RRF    3B,F
02B5:  RRF    3A,F
02B6:  INCF   77,F
02B7:  BTFSC  03.2
02B8:  GOTO   343
02B9:  GOTO   2C5
02BA:  BTFSC  3D.7
02BB:  GOTO   2C8
02BC:  BCF    03.0
02BD:  RLF    3A,F
02BE:  RLF    3B,F
02BF:  RLF    3C,F
02C0:  RLF    3D,F
02C1:  DECF   77,F
02C2:  BTFSC  03.2
02C3:  GOTO   343
02C4:  GOTO   2BA
02C5:  BSF    39.7
02C6:  GOTO   2F0
02C7:  BCF    39.7
02C8:  MOVF   34,W
02C9:  MOVWF  38
02CA:  BTFSS  38.7
02CB:  GOTO   2CE
02CC:  BSF    3D.7
02CD:  GOTO   33C
02CE:  BCF    3D.7
02CF:  GOTO   33C
02D0:  MOVF   34,W
02D1:  MOVWF  3D
02D2:  BSF    3D.7
02D3:  MOVF   35,W
02D4:  MOVWF  3C
02D5:  MOVF   36,W
02D6:  MOVWF  3B
02D7:  BTFSS  38.7
02D8:  GOTO   2DD
02D9:  BCF    3D.7
02DA:  BSF    39.2
02DB:  GOTO   348
02DC:  BCF    39.2
02DD:  CLRF   3A
02DE:  BCF    37.0
02DF:  MOVLW  32
02E0:  MOVWF  04
02E1:  BCF    03.7
02E2:  GOTO   35D
02E3:  BTFSC  38.7
02E4:  GOTO   306
02E5:  MOVF   30,W
02E6:  MOVWF  38
02E7:  BTFSS  37.0
02E8:  GOTO   2F0
02E9:  RRF    3D,F
02EA:  RRF    3C,F
02EB:  RRF    3B,F
02EC:  RRF    3A,F
02ED:  INCF   77,F
02EE:  BTFSC  03.2
02EF:  GOTO   343
02F0:  BTFSS  3A.7
02F1:  GOTO   301
02F2:  INCF   3B,F
02F3:  BTFSS  03.2
02F4:  GOTO   301
02F5:  INCF   3C,F
02F6:  BTFSS  03.2
02F7:  GOTO   301
02F8:  INCF   3D,F
02F9:  BTFSS  03.2
02FA:  GOTO   301
02FB:  RRF    3D,F
02FC:  RRF    3C,F
02FD:  RRF    3B,F
02FE:  INCF   77,F
02FF:  BTFSC  03.2
0300:  GOTO   343
0301:  BTFSC  39.6
0302:  GOTO   285
0303:  BTFSC  39.7
0304:  GOTO   2C7
0305:  GOTO   325
0306:  MOVLW  80
0307:  XORWF  3D,F
0308:  BTFSS  3D.7
0309:  GOTO   30E
030A:  GOTO   348
030B:  MOVF   34,W
030C:  MOVWF  38
030D:  GOTO   31B
030E:  MOVF   30,W
030F:  MOVWF  38
0310:  MOVF   3D,F
0311:  BTFSS  03.2
0312:  GOTO   31B
0313:  MOVF   3C,F
0314:  BTFSS  03.2
0315:  GOTO   31B
0316:  MOVF   3B,F
0317:  BTFSS  03.2
0318:  GOTO   31B
0319:  CLRF   77
031A:  GOTO   33C
031B:  BTFSC  3D.7
031C:  GOTO   325
031D:  BCF    03.0
031E:  RLF    3A,F
031F:  RLF    3B,F
0320:  RLF    3C,F
0321:  RLF    3D,F
0322:  DECFSZ 77,F
0323:  GOTO   31B
0324:  GOTO   343
0325:  BTFSS  38.7
0326:  GOTO   329
0327:  BSF    3D.7
0328:  GOTO   33C
0329:  BCF    3D.7
032A:  GOTO   33C
032B:  MOVF   33,W
032C:  MOVWF  77
032D:  MOVF   34,W
032E:  MOVWF  3D
032F:  MOVF   35,W
0330:  MOVWF  3C
0331:  MOVF   36,W
0332:  MOVWF  3B
0333:  GOTO   33C
0334:  MOVF   2F,W
0335:  MOVWF  77
0336:  MOVF   30,W
0337:  MOVWF  3D
0338:  MOVF   31,W
0339:  MOVWF  3C
033A:  MOVF   32,W
033B:  MOVWF  3B
033C:  MOVF   3D,W
033D:  MOVWF  78
033E:  MOVF   3C,W
033F:  MOVWF  79
0340:  MOVF   3B,W
0341:  MOVWF  7A
0342:  GOTO   37B
0343:  CLRF   77
0344:  CLRF   78
0345:  CLRF   79
0346:  CLRF   7A
0347:  GOTO   37B
0348:  CLRF   3A
0349:  COMF   3B,F
034A:  COMF   3C,F
034B:  COMF   3D,F
034C:  COMF   3A,F
034D:  INCF   3A,F
034E:  BTFSS  03.2
034F:  GOTO   356
0350:  INCF   3B,F
0351:  BTFSS  03.2
0352:  GOTO   356
0353:  INCF   3C,F
0354:  BTFSC  03.2
0355:  INCF   3D,F
0356:  BTFSC  39.0
0357:  GOTO   264
0358:  BTFSC  39.1
0359:  GOTO   2A6
035A:  BTFSC  39.2
035B:  GOTO   2DC
035C:  GOTO   30B
035D:  MOVF   00,W
035E:  ADDWF  3B,F
035F:  BTFSS  03.0
0360:  GOTO   367
0361:  INCF   3C,F
0362:  BTFSS  03.2
0363:  GOTO   367
0364:  INCF   3D,F
0365:  BTFSC  03.2
0366:  BSF    37.0
0367:  DECF   04,F
0368:  MOVF   00,W
0369:  ADDWF  3C,F
036A:  BTFSS  03.0
036B:  GOTO   36F
036C:  INCF   3D,F
036D:  BTFSC  03.2
036E:  BSF    37.0
036F:  DECF   04,F
0370:  MOVF   00,W
0371:  BTFSS  00.7
0372:  XORLW  80
0373:  ADDWF  3D,F
0374:  BTFSC  03.0
0375:  BSF    37.0
0376:  BTFSC  39.4
0377:  GOTO   26B
0378:  BTFSC  39.5
0379:  GOTO   2AD
037A:  GOTO   2E3
037B:  BCF    0A.3
037C:  BCF    0A.4
037D:  GOTO   5B3 (RETURN)
037E:  MOVF   2C,W
037F:  MOVWF  33
0380:  MOVF   30,W
0381:  XORWF  33,F
0382:  BTFSS  33.7
0383:  GOTO   389
0384:  BCF    03.2
0385:  BCF    03.0
0386:  BTFSC  2C.7
0387:  BSF    03.0
0388:  GOTO   3BC
0389:  MOVF   2C,W
038A:  MOVWF  33
038B:  MOVF   2F,W
038C:  MOVWF  34
038D:  MOVF   2B,W
038E:  SUBWF  34,F
038F:  BTFSC  03.2
0390:  GOTO   397
0391:  BTFSS  33.7
0392:  GOTO   3BC
0393:  MOVF   03,W
0394:  XORLW  01
0395:  MOVWF  03
0396:  GOTO   3BC
0397:  MOVF   30,W
0398:  MOVWF  34
0399:  MOVF   2C,W
039A:  SUBWF  34,F
039B:  BTFSC  03.2
039C:  GOTO   3A3
039D:  BTFSS  33.7
039E:  GOTO   3BC
039F:  MOVF   03,W
03A0:  XORLW  01
03A1:  MOVWF  03
03A2:  GOTO   3BC
03A3:  MOVF   31,W
03A4:  MOVWF  34
03A5:  MOVF   2D,W
03A6:  SUBWF  34,F
03A7:  BTFSC  03.2
03A8:  GOTO   3AF
03A9:  BTFSS  33.7
03AA:  GOTO   3BC
03AB:  MOVF   03,W
03AC:  XORLW  01
03AD:  MOVWF  03
03AE:  GOTO   3BC
03AF:  MOVF   32,W
03B0:  MOVWF  34
03B1:  MOVF   2E,W
03B2:  SUBWF  34,F
03B3:  BTFSC  03.2
03B4:  GOTO   3BB
03B5:  BTFSS  33.7
03B6:  GOTO   3BC
03B7:  MOVF   03,W
03B8:  XORLW  01
03B9:  MOVWF  03
03BA:  GOTO   3BC
03BB:  BCF    03.0
03BC:  RETURN
*
03CA:  BTFSC  03.1
03CB:  GOTO   3CF
03CC:  MOVLW  40
03CD:  MOVWF  04
03CE:  BCF    03.7
03CF:  CLRF   77
03D0:  CLRF   78
03D1:  CLRF   79
03D2:  CLRF   7A
03D3:  CLRF   40
03D4:  CLRF   41
03D5:  CLRF   42
03D6:  CLRF   43
03D7:  MOVF   3F,W
03D8:  IORWF  3E,W
03D9:  IORWF  3D,W
03DA:  IORWF  3C,W
03DB:  BTFSC  03.2
03DC:  GOTO   40D
03DD:  MOVLW  20
03DE:  MOVWF  44
03DF:  BCF    03.0
03E0:  RLF    38,F
03E1:  RLF    39,F
03E2:  RLF    3A,F
03E3:  RLF    3B,F
03E4:  RLF    40,F
03E5:  RLF    41,F
03E6:  RLF    42,F
03E7:  RLF    43,F
03E8:  MOVF   3F,W
03E9:  SUBWF  43,W
03EA:  BTFSS  03.2
03EB:  GOTO   3F6
03EC:  MOVF   3E,W
03ED:  SUBWF  42,W
03EE:  BTFSS  03.2
03EF:  GOTO   3F6
03F0:  MOVF   3D,W
03F1:  SUBWF  41,W
03F2:  BTFSS  03.2
03F3:  GOTO   3F6
03F4:  MOVF   3C,W
03F5:  SUBWF  40,W
03F6:  BTFSS  03.0
03F7:  GOTO   407
03F8:  MOVF   3C,W
03F9:  SUBWF  40,F
03FA:  MOVF   3D,W
03FB:  BTFSS  03.0
03FC:  INCFSZ 3D,W
03FD:  SUBWF  41,F
03FE:  MOVF   3E,W
03FF:  BTFSS  03.0
0400:  INCFSZ 3E,W
0401:  SUBWF  42,F
0402:  MOVF   3F,W
0403:  BTFSS  03.0
0404:  INCFSZ 3F,W
0405:  SUBWF  43,F
0406:  BSF    03.0
0407:  RLF    77,F
0408:  RLF    78,F
0409:  RLF    79,F
040A:  RLF    7A,F
040B:  DECFSZ 44,F
040C:  GOTO   3DF
040D:  MOVF   40,W
040E:  MOVWF  00
040F:  INCF   04,F
0410:  MOVF   41,W
0411:  MOVWF  00
0412:  INCF   04,F
0413:  MOVF   42,W
0414:  MOVWF  00
0415:  INCF   04,F
0416:  MOVF   43,W
0417:  MOVWF  00
0418:  RETURN
0419:  MOVF   04,W
041A:  MOVWF  30
041B:  MOVF   2F,W
041C:  MOVWF  32
041D:  BTFSC  03.2
041E:  GOTO   438
041F:  MOVF   2E,W
0420:  MOVWF  3B
0421:  MOVF   2D,W
0422:  MOVWF  3A
0423:  MOVF   2C,W
0424:  MOVWF  39
0425:  MOVF   2B,W
0426:  MOVWF  38
0427:  CLRF   3F
0428:  CLRF   3E
0429:  MOVLW  20
042A:  MOVWF  3D
042B:  MOVLW  82
042C:  MOVWF  3C
042D:  CALL   1C6
042E:  MOVF   7A,W
042F:  MOVWF  2E
0430:  MOVF   79,W
0431:  MOVWF  2D
0432:  MOVF   78,W
0433:  MOVWF  2C
0434:  MOVF   77,W
0435:  MOVWF  2B
0436:  DECFSZ 32,F
0437:  GOTO   41F
0438:  MOVF   2E,W
0439:  MOVWF  3B
043A:  MOVF   2D,W
043B:  MOVWF  3A
043C:  MOVF   2C,W
043D:  MOVWF  39
043E:  MOVF   2B,W
043F:  MOVWF  38
0440:  MOVF   38,W
0441:  SUBLW  B6
0442:  MOVWF  38
0443:  CLRF   7A
0444:  MOVF   39,W
0445:  MOVWF  3C
0446:  BSF    39.7
0447:  BCF    03.0
0448:  RRF    39,F
0449:  RRF    3A,F
044A:  RRF    3B,F
044B:  RRF    7A,F
044C:  RRF    79,F
044D:  RRF    78,F
044E:  RRF    77,F
044F:  DECFSZ 38,F
0450:  GOTO   447
0451:  BTFSS  3C.7
0452:  GOTO   45E
0453:  COMF   77,F
0454:  COMF   78,F
0455:  COMF   79,F
0456:  COMF   7A,F
0457:  INCF   77,F
0458:  BTFSC  03.2
0459:  INCF   78,F
045A:  BTFSC  03.2
045B:  INCF   79,F
045C:  BTFSC  03.2
045D:  INCF   7A,F
045E:  MOVF   7A,W
045F:  MOVWF  2E
0460:  MOVF   79,W
0461:  MOVWF  2D
0462:  MOVF   78,W
0463:  MOVWF  2C
0464:  MOVF   77,W
0465:  MOVWF  2B
0466:  BTFSS  2E.7
0467:  GOTO   475
0468:  DECF   30,F
0469:  BSF    30.5
046A:  COMF   2B,F
046B:  COMF   2C,F
046C:  COMF   2D,F
046D:  COMF   2E,F
046E:  INCF   2B,F
046F:  BTFSC  03.2
0470:  INCF   2C,F
0471:  BTFSC  03.2
0472:  INCF   2D,F
0473:  BTFSC  03.2
0474:  INCF   2E,F
0475:  MOVLW  3B
0476:  MOVWF  37
0477:  MOVLW  9A
0478:  MOVWF  36
0479:  MOVLW  CA
047A:  MOVWF  35
047B:  CLRF   34
047C:  MOVLW  0A
047D:  MOVWF  32
047E:  MOVF   2F,W
047F:  BTFSC  03.2
0480:  INCF   30,F
0481:  BSF    03.1
0482:  MOVLW  2B
0483:  MOVWF  04
0484:  BCF    03.7
0485:  MOVF   2E,W
0486:  MOVWF  3B
0487:  MOVF   2D,W
0488:  MOVWF  3A
0489:  MOVF   2C,W
048A:  MOVWF  39
048B:  MOVF   2B,W
048C:  MOVWF  38
048D:  MOVF   37,W
048E:  MOVWF  3F
048F:  MOVF   36,W
0490:  MOVWF  3E
0491:  MOVF   35,W
0492:  MOVWF  3D
0493:  MOVF   34,W
0494:  MOVWF  3C
0495:  CALL   3CA
0496:  MOVF   78,W
0497:  MOVF   77,F
0498:  BTFSS  03.2
0499:  GOTO   4AD
049A:  INCF   2F,W
049B:  SUBWF  32,W
049C:  BTFSC  03.2
049D:  GOTO   4AD
049E:  MOVF   30,W
049F:  BTFSC  03.2
04A0:  GOTO   4AF
04A1:  ANDLW  0F
04A2:  SUBWF  32,W
04A3:  BTFSC  03.2
04A4:  GOTO   4A7
04A5:  BTFSC  03.0
04A6:  GOTO   4DF
04A7:  BTFSC  30.7
04A8:  GOTO   4DF
04A9:  BTFSC  30.6
04AA:  GOTO   4AF
04AB:  MOVLW  20
04AC:  GOTO   4DB
04AD:  MOVLW  20
04AE:  ANDWF  30,F
04AF:  BTFSS  30.5
04B0:  GOTO   4BD
04B1:  BCF    30.5
04B2:  MOVF   2F,W
04B3:  BTFSS  03.2
04B4:  DECF   30,F
04B5:  MOVF   77,W
04B6:  MOVWF  30
04B7:  MOVLW  2D
04B8:  MOVWF  38
04B9:  CALL   12E
04BA:  MOVF   30,W
04BB:  MOVWF  77
04BC:  CLRF   30
04BD:  MOVF   2F,W
04BE:  SUBWF  32,W
04BF:  BTFSS  03.2
04C0:  GOTO   4CB
04C1:  MOVF   77,W
04C2:  MOVWF  30
04C3:  MOVLW  2E
04C4:  MOVWF  38
04C5:  CALL   12E
04C6:  MOVF   30,W
04C7:  MOVWF  77
04C8:  MOVLW  20
04C9:  ANDWF  30,F
04CA:  MOVLW  00
04CB:  MOVLW  30
04CC:  BTFSS  30.5
04CD:  GOTO   4DB
04CE:  BCF    30.5
04CF:  MOVF   2F,W
04D0:  BTFSS  03.2
04D1:  DECF   30,F
04D2:  MOVF   77,W
04D3:  MOVWF  30
04D4:  MOVLW  2D
04D5:  MOVWF  38
04D6:  CALL   12E
04D7:  MOVF   30,W
04D8:  MOVWF  77
04D9:  CLRF   30
04DA:  MOVLW  30
04DB:  ADDWF  77,F
04DC:  MOVF   77,W
04DD:  MOVWF  38
04DE:  CALL   12E
04DF:  BCF    03.1
04E0:  MOVF   37,W
04E1:  MOVWF  3B
04E2:  MOVF   36,W
04E3:  MOVWF  3A
04E4:  MOVF   35,W
04E5:  MOVWF  39
04E6:  MOVF   34,W
04E7:  MOVWF  38
04E8:  CLRF   3F
04E9:  CLRF   3E
04EA:  CLRF   3D
04EB:  MOVLW  0A
04EC:  MOVWF  3C
04ED:  CALL   3CA
04EE:  MOVF   7A,W
04EF:  MOVWF  37
04F0:  MOVF   79,W
04F1:  MOVWF  36
04F2:  MOVF   78,W
04F3:  MOVWF  35
04F4:  MOVF   77,W
04F5:  MOVWF  34
04F6:  DECFSZ 32,F
04F7:  GOTO   481
04F8:  BCF    0A.3
04F9:  BCF    0A.4
04FA:  GOTO   67F (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
0012:  MOVLW  39
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   026
0018:  MOVLW  01
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  4A
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  GOTO   024
0024:  DECFSZ 00,F
0025:  GOTO   018
0026:  RETURN
....................  
....................  
.................... #define LCD_ENABLE_PIN PIN_B0 
.................... #define LCD_RS_PIN PIN_B1 
.................... #define LCD_RW_PIN PIN_B2 
.................... #define LCD_DATA4 PIN_B4 
.................... #define LCD_DATA5 PIN_B5 
.................... #define LCD_DATA6 PIN_B6 
.................... #define LCD_DATA7 PIN_B7 
....................    unsigned long int bilgi; 
....................    float sicaklik,voltaj; 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
008B:  BSF    06.4
....................    output_float(LCD_DATA5); 
008C:  BSF    06.5
....................    output_float(LCD_DATA6); 
008D:  BSF    06.6
....................    output_float(LCD_DATA7); 
008E:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
008F:  BCF    03.5
0090:  BSF    06.2
0091:  BSF    03.5
0092:  BCF    06.2
....................    delay_cycles(1); 
0093:  NOP
....................    lcd_output_enable(1); 
0094:  BCF    03.5
0095:  BSF    06.0
0096:  BSF    03.5
0097:  BCF    06.0
....................    delay_cycles(1); 
0098:  NOP
....................    high = lcd_read_nibble(); 
0099:  BCF    03.5
009A:  CALL   052
009B:  MOVF   78,W
009C:  MOVWF  40
....................        
....................    lcd_output_enable(0); 
009D:  BCF    06.0
009E:  BSF    03.5
009F:  BCF    06.0
....................    delay_cycles(1); 
00A0:  NOP
....................    lcd_output_enable(1); 
00A1:  BCF    03.5
00A2:  BSF    06.0
00A3:  BSF    03.5
00A4:  BCF    06.0
....................    delay_us(1); 
00A5:  NOP
....................    low = lcd_read_nibble(); 
00A6:  BCF    03.5
00A7:  CALL   052
00A8:  MOVF   78,W
00A9:  MOVWF  3F
....................        
....................    lcd_output_enable(0); 
00AA:  BCF    06.0
00AB:  BSF    03.5
00AC:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00AD:  BCF    06.4
....................    output_drive(LCD_DATA5); 
00AE:  BCF    06.5
....................    output_drive(LCD_DATA6); 
00AF:  BCF    06.6
....................    output_drive(LCD_DATA7); 
00B0:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B1:  BCF    03.5
00B2:  SWAPF  40,W
00B3:  MOVWF  77
00B4:  MOVLW  F0
00B5:  ANDWF  77,F
00B6:  MOVF   77,W
00B7:  IORWF  3F,W
00B8:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0052:  CLRF   41
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0053:  BSF    03.5
0054:  BSF    06.4
0055:  MOVLW  00
0056:  BCF    03.5
0057:  BTFSC  06.4
0058:  MOVLW  01
0059:  IORWF  41,F
....................    n |= input(LCD_DATA5) << 1; 
005A:  BSF    03.5
005B:  BSF    06.5
005C:  MOVLW  00
005D:  BCF    03.5
005E:  BTFSC  06.5
005F:  MOVLW  01
0060:  MOVWF  77
0061:  BCF    03.0
0062:  RLF    77,F
0063:  MOVF   77,W
0064:  IORWF  41,F
....................    n |= input(LCD_DATA6) << 2; 
0065:  BSF    03.5
0066:  BSF    06.6
0067:  MOVLW  00
0068:  BCF    03.5
0069:  BTFSC  06.6
006A:  MOVLW  01
006B:  MOVWF  77
006C:  RLF    77,F
006D:  RLF    77,F
006E:  MOVLW  FC
006F:  ANDWF  77,F
0070:  MOVF   77,W
0071:  IORWF  41,F
....................    n |= input(LCD_DATA7) << 3; 
0072:  BSF    03.5
0073:  BSF    06.7
0074:  MOVLW  00
0075:  BCF    03.5
0076:  BTFSC  06.7
0077:  MOVLW  01
0078:  MOVWF  77
0079:  RLF    77,F
007A:  RLF    77,F
007B:  RLF    77,F
007C:  MOVLW  F8
007D:  ANDWF  77,F
007E:  MOVF   77,W
007F:  IORWF  41,F
....................     
....................    return(n); 
0080:  MOVF   41,W
0081:  MOVWF  78
....................   #else 
0082:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0027:  BTFSC  40.0
0028:  GOTO   02B
0029:  BCF    06.4
002A:  GOTO   02C
002B:  BSF    06.4
002C:  BSF    03.5
002D:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
002E:  BCF    03.5
002F:  BTFSC  40.1
0030:  GOTO   033
0031:  BCF    06.5
0032:  GOTO   034
0033:  BSF    06.5
0034:  BSF    03.5
0035:  BCF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0036:  BCF    03.5
0037:  BTFSC  40.2
0038:  GOTO   03B
0039:  BCF    06.6
003A:  GOTO   03C
003B:  BSF    06.6
003C:  BSF    03.5
003D:  BCF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
003E:  BCF    03.5
003F:  BTFSC  40.3
0040:  GOTO   043
0041:  BCF    06.7
0042:  GOTO   044
0043:  BSF    06.7
0044:  BSF    03.5
0045:  BCF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0046:  NOP
....................    lcd_output_enable(1); 
0047:  BCF    03.5
0048:  BSF    06.0
0049:  BSF    03.5
004A:  BCF    06.0
....................    delay_us(2); 
004B:  GOTO   04C
....................    lcd_output_enable(0); 
004C:  BCF    03.5
004D:  BCF    06.0
004E:  BSF    03.5
004F:  BCF    06.0
0050:  BCF    03.5
0051:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0083:  BSF    03.5
0084:  BCF    06.0
....................    lcd_rs_tris(); 
0085:  BCF    06.1
....................    lcd_rw_tris(); 
0086:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0087:  BCF    03.5
0088:  BCF    06.1
0089:  BSF    03.5
008A:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00B9:  MOVF   78,W
00BA:  MOVWF  3F
00BB:  BTFSS  3F.7
00BC:  GOTO   0BF
00BD:  BSF    03.5
00BE:  GOTO   08B
....................    lcd_output_rs(address); 
00BF:  MOVF   3D,F
00C0:  BTFSS  03.2
00C1:  GOTO   0C4
00C2:  BCF    06.1
00C3:  GOTO   0C5
00C4:  BSF    06.1
00C5:  BSF    03.5
00C6:  BCF    06.1
....................    delay_cycles(1); 
00C7:  NOP
....................    lcd_output_rw(0); 
00C8:  BCF    03.5
00C9:  BCF    06.2
00CA:  BSF    03.5
00CB:  BCF    06.2
....................    delay_cycles(1); 
00CC:  NOP
....................    lcd_output_enable(0); 
00CD:  BCF    03.5
00CE:  BCF    06.0
00CF:  BSF    03.5
00D0:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
00D1:  BCF    03.5
00D2:  SWAPF  3E,W
00D3:  MOVWF  3F
00D4:  MOVLW  0F
00D5:  ANDWF  3F,F
00D6:  MOVF   3F,W
00D7:  MOVWF  40
00D8:  CALL   027
....................    lcd_send_nibble(n & 0xf); 
00D9:  MOVF   3E,W
00DA:  ANDLW  0F
00DB:  MOVWF  3F
00DC:  MOVWF  40
00DD:  CALL   027
00DE:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00DF:  BSF    03.5
00E0:  BCF    06.4
....................    output_drive(LCD_DATA5); 
00E1:  BCF    06.5
....................    output_drive(LCD_DATA6); 
00E2:  BCF    06.6
....................    output_drive(LCD_DATA7); 
00E3:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00E4:  BCF    06.0
....................    lcd_rs_tris(); 
00E5:  BCF    06.1
....................    lcd_rw_tris(); 
00E6:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00E7:  BCF    03.5
00E8:  BCF    06.1
00E9:  BSF    03.5
00EA:  BCF    06.1
....................    lcd_output_rw(0); 
00EB:  BCF    03.5
00EC:  BCF    06.2
00ED:  BSF    03.5
00EE:  BCF    06.2
....................    lcd_output_enable(0); 
00EF:  BCF    03.5
00F0:  BCF    06.0
00F1:  BSF    03.5
00F2:  BCF    06.0
....................      
....................    delay_ms(15); 
00F3:  MOVLW  0F
00F4:  BCF    03.5
00F5:  MOVWF  39
00F6:  CALL   012
....................    for(i=1;i<=3;++i) 
00F7:  MOVLW  01
00F8:  MOVWF  2B
00F9:  MOVF   2B,W
00FA:  SUBLW  03
00FB:  BTFSS  03.0
00FC:  GOTO   105
....................    { 
....................        lcd_send_nibble(3); 
00FD:  MOVLW  03
00FE:  MOVWF  40
00FF:  CALL   027
....................        delay_ms(5); 
0100:  MOVLW  05
0101:  MOVWF  39
0102:  CALL   012
0103:  INCF   2B,F
0104:  GOTO   0F9
....................    } 
....................     
....................    lcd_send_nibble(2); 
0105:  MOVLW  02
0106:  MOVWF  40
0107:  CALL   027
....................    delay_ms(5); 
0108:  MOVLW  05
0109:  MOVWF  39
010A:  CALL   012
....................    for(i=0;i<=3;++i) 
010B:  CLRF   2B
010C:  MOVF   2B,W
010D:  SUBLW  03
010E:  BTFSS  03.0
010F:  GOTO   119
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0110:  MOVF   2B,W
0111:  CALL   004
0112:  MOVWF  2C
0113:  CLRF   3D
0114:  MOVF   2C,W
0115:  MOVWF  3E
0116:  CALL   083
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0117:  INCF   2B,F
0118:  GOTO   10C
0119:  BCF    0A.3
011A:  BCF    0A.4
011B:  GOTO   552 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
011C:  DECFSZ 3A,W
011D:  GOTO   11F
011E:  GOTO   122
....................       address=LCD_LINE_TWO; 
011F:  MOVLW  40
0120:  MOVWF  3B
0121:  GOTO   123
....................    else 
....................       address=0; 
0122:  CLRF   3B
....................       
....................    address+=x-1; 
0123:  MOVLW  01
0124:  SUBWF  39,W
0125:  ADDWF  3B,F
....................    lcd_send_byte(0,0x80|address); 
0126:  MOVF   3B,W
0127:  IORLW  80
0128:  MOVWF  3C
0129:  CLRF   3D
012A:  MOVF   3C,W
012B:  MOVWF  3E
012C:  CALL   083
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
012D:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
012E:  MOVF   38,W
012F:  XORLW  07
0130:  BTFSC  03.2
0131:  GOTO   13C
0132:  XORLW  0B
0133:  BTFSC  03.2
0134:  GOTO   141
0135:  XORLW  06
0136:  BTFSC  03.2
0137:  GOTO   149
0138:  XORLW  02
0139:  BTFSC  03.2
013A:  GOTO   14F
013B:  GOTO   154
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
013C:  MOVLW  01
013D:  MOVWF  39
013E:  MOVWF  3A
013F:  CALL   11C
0140:  GOTO   159
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0141:  CLRF   3D
0142:  MOVLW  01
0143:  MOVWF  3E
0144:  CALL   083
....................                      delay_ms(2); 
0145:  MOVLW  02
0146:  MOVWF  39
0147:  CALL   012
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0148:  GOTO   159
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0149:  MOVLW  01
014A:  MOVWF  39
014B:  MOVLW  02
014C:  MOVWF  3A
014D:  CALL   11C
014E:  GOTO   159
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
014F:  CLRF   3D
0150:  MOVLW  10
0151:  MOVWF  3E
0152:  CALL   083
0153:  GOTO   159
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0154:  MOVLW  01
0155:  MOVWF  3D
0156:  MOVF   38,W
0157:  MOVWF  3E
0158:  CALL   083
....................      #endif 
....................    } 
0159:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... void fan_calis( ); 
.................... void main() 
*
04FB:  MOVLW  FF
04FC:  MOVWF  2A
04FD:  BSF    03.5
04FE:  BSF    1F.0
04FF:  BSF    1F.1
0500:  BSF    1F.2
0501:  BCF    1F.3
0502:  MOVLW  07
0503:  MOVWF  1C
0504:  BCF    03.7
0505:  MOVLW  1F
0506:  ANDWF  03,F
.................... { 
....................    
....................  
....................    setup_spi(SPI_SS_DISABLED); 
0507:  BCF    03.5
0508:  BCF    14.5
0509:  BCF    2A.5
050A:  MOVF   2A,W
050B:  BSF    03.5
050C:  MOVWF  07
050D:  BCF    03.5
050E:  BSF    2A.4
050F:  MOVF   2A,W
0510:  BSF    03.5
0511:  MOVWF  07
0512:  BCF    03.5
0513:  BCF    2A.3
0514:  MOVF   2A,W
0515:  BSF    03.5
0516:  MOVWF  07
0517:  MOVLW  01
0518:  BCF    03.5
0519:  MOVWF  14
051A:  MOVLW  00
051B:  BSF    03.5
051C:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
051D:  MOVF   01,W
051E:  ANDLW  C7
051F:  IORLW  08
0520:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0521:  BCF    03.5
0522:  CLRF   10
....................    setup_timer_2(T2_DIV_BY_16,255,1); 
0523:  MOVLW  00
0524:  MOVWF  78
0525:  IORLW  06
0526:  MOVWF  12
0527:  MOVLW  FF
0528:  BSF    03.5
0529:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
052A:  MOVLW  07
052B:  MOVWF  1C
052C:  MOVF   05,W
052D:  MOVWF  05
052E:  MOVLW  02
052F:  MOVWF  77
0530:  DECFSZ 77,F
0531:  GOTO   530
0532:  GOTO   533
0533:  NOP
0534:  MOVF   1C,W
0535:  BCF    03.5
0536:  BCF    0D.6
....................    setup_vref(FALSE); 
0537:  BSF    03.5
0538:  CLRF   1D
....................    set_tris_a(0b00000001); 
0539:  MOVLW  01
053A:  MOVWF  05
....................    set_tris_c(0x00); 
053B:  MOVLW  00
053C:  MOVWF  07
053D:  BCF    03.5
053E:  MOVWF  2A
....................    setup_CCP1(CCP_OFF); 
053F:  MOVLW  F0
0540:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
0541:  ANDWF  1D,F
....................   // set_pwm1_duty(0); 
....................    setup_adc(adc_clock_div_32); 
0542:  BSF    03.5
0543:  BCF    1F.6
0544:  BCF    03.5
0545:  BCF    1F.6
0546:  BSF    1F.7
0547:  BSF    03.5
0548:  BSF    1F.7
0549:  BCF    03.5
054A:  BSF    1F.0
....................    setup_adc_ports(AN0);  
054B:  BSF    03.5
054C:  BCF    1F.0
054D:  BSF    1F.1
054E:  BSF    1F.2
054F:  BSF    1F.3
....................    lcd_init(); 
0550:  BCF    03.5
0551:  GOTO   0DF
....................    set_adc_channel(0); 
0552:  MOVLW  00
0553:  MOVWF  78
0554:  MOVF   1F,W
0555:  ANDLW  C7
0556:  IORWF  78,W
0557:  MOVWF  1F
....................    delay_us(20); 
0558:  MOVLW  06
0559:  MOVWF  77
055A:  DECFSZ 77,F
055B:  GOTO   55A
055C:  NOP
....................    printf(lcd_putc,"\fSicaklik="); 
055D:  MOVLW  0C
055E:  BSF    03.6
055F:  MOVWF  0D
0560:  MOVLW  00
0561:  MOVWF  0F
0562:  BCF    03.6
0563:  GOTO   15A
....................  
....................    while(TRUE) 
....................    { 
....................    bilgi=read_adc(); 
0564:  BSF    1F.2
0565:  BTFSC  1F.2
0566:  GOTO   565
0567:  BSF    03.5
0568:  MOVF   1E,W
0569:  BCF    03.5
056A:  MOVWF  20
056B:  MOVF   1E,W
056C:  MOVWF  21
....................    voltaj=(0.004882812*bilgi); 
056D:  MOVF   21,W
056E:  MOVWF  2C
056F:  MOVF   20,W
0570:  MOVWF  2B
0571:  GOTO   1A7
0572:  MOVLW  FF
0573:  MOVWF  3B
0574:  MOVWF  3A
0575:  MOVLW  1F
0576:  MOVWF  39
0577:  MOVLW  77
0578:  MOVWF  38
0579:  MOVF   7A,W
057A:  MOVWF  3F
057B:  MOVF   79,W
057C:  MOVWF  3E
057D:  MOVF   78,W
057E:  MOVWF  3D
057F:  MOVF   77,W
0580:  MOVWF  3C
0581:  CALL   1C6
0582:  MOVF   7A,W
0583:  MOVWF  29
0584:  MOVF   79,W
0585:  MOVWF  28
0586:  MOVF   78,W
0587:  MOVWF  27
0588:  MOVF   77,W
0589:  MOVWF  26
....................    sicaklik=(voltaj*100)-0.2; 
058A:  MOVF   29,W
058B:  MOVWF  3B
058C:  MOVF   28,W
058D:  MOVWF  3A
058E:  MOVF   27,W
058F:  MOVWF  39
0590:  MOVF   26,W
0591:  MOVWF  38
0592:  CLRF   3F
0593:  CLRF   3E
0594:  MOVLW  48
0595:  MOVWF  3D
0596:  MOVLW  85
0597:  MOVWF  3C
0598:  CALL   1C6
0599:  MOVF   7A,W
059A:  MOVWF  2E
059B:  MOVF   79,W
059C:  MOVWF  2D
059D:  MOVF   78,W
059E:  MOVWF  2C
059F:  MOVF   77,W
05A0:  MOVWF  2B
05A1:  BSF    03.1
05A2:  MOVF   7A,W
05A3:  MOVWF  32
05A4:  MOVF   79,W
05A5:  MOVWF  31
05A6:  MOVF   78,W
05A7:  MOVWF  30
05A8:  MOVF   77,W
05A9:  MOVWF  2F
05AA:  MOVLW  CD
05AB:  MOVWF  36
05AC:  MOVLW  CC
05AD:  MOVWF  35
05AE:  MOVLW  4C
05AF:  MOVWF  34
05B0:  MOVLW  7C
05B1:  MOVWF  33
05B2:  GOTO   23B
05B3:  MOVF   7A,W
05B4:  MOVWF  25
05B5:  MOVF   79,W
05B6:  MOVWF  24
05B7:  MOVF   78,W
05B8:  MOVWF  23
05B9:  MOVF   77,W
05BA:  MOVWF  22
.................... if(sicaklik<30){ 
05BB:  MOVF   25,W
05BC:  MOVWF  2E
05BD:  MOVF   24,W
05BE:  MOVWF  2D
05BF:  MOVF   23,W
05C0:  MOVWF  2C
05C1:  MOVF   22,W
05C2:  MOVWF  2B
05C3:  CLRF   32
05C4:  CLRF   31
05C5:  MOVLW  70
05C6:  MOVWF  30
05C7:  MOVLW  83
05C8:  MOVWF  2F
05C9:  CALL   37E
05CA:  BTFSC  03.0
....................    fan_calis( ); 
05CB:  CALL   3BD
....................   // set_pwm1_duty(0); 
....................    } 
.................... if(sicaklik>=30&&sicaklik<35){ 
05CC:  CLRF   2E
05CD:  CLRF   2D
05CE:  MOVLW  70
05CF:  MOVWF  2C
05D0:  MOVLW  83
05D1:  MOVWF  2B
05D2:  MOVF   25,W
05D3:  MOVWF  32
05D4:  MOVF   24,W
05D5:  MOVWF  31
05D6:  MOVF   23,W
05D7:  MOVWF  30
05D8:  MOVF   22,W
05D9:  MOVWF  2F
05DA:  CALL   37E
05DB:  BTFSC  03.0
05DC:  GOTO   5DF
05DD:  BTFSS  03.2
05DE:  GOTO   5F0
05DF:  MOVF   25,W
05E0:  MOVWF  2E
05E1:  MOVF   24,W
05E2:  MOVWF  2D
05E3:  MOVF   23,W
05E4:  MOVWF  2C
05E5:  MOVF   22,W
05E6:  MOVWF  2B
05E7:  CLRF   32
05E8:  CLRF   31
05E9:  MOVLW  0C
05EA:  MOVWF  30
05EB:  MOVLW  84
05EC:  MOVWF  2F
05ED:  CALL   37E
05EE:  BTFSC  03.0
....................    fan_calis( ); 
05EF:  CALL   3BD
....................    // set_pwm1_duty(35); 
....................    } 
.................... if(sicaklik>=35&&sicaklik<40){ 
05F0:  CLRF   2E
05F1:  CLRF   2D
05F2:  MOVLW  0C
05F3:  MOVWF  2C
05F4:  MOVLW  84
05F5:  MOVWF  2B
05F6:  MOVF   25,W
05F7:  MOVWF  32
05F8:  MOVF   24,W
05F9:  MOVWF  31
05FA:  MOVF   23,W
05FB:  MOVWF  30
05FC:  MOVF   22,W
05FD:  MOVWF  2F
05FE:  CALL   37E
05FF:  BTFSC  03.0
0600:  GOTO   603
0601:  BTFSS  03.2
0602:  GOTO   614
0603:  MOVF   25,W
0604:  MOVWF  2E
0605:  MOVF   24,W
0606:  MOVWF  2D
0607:  MOVF   23,W
0608:  MOVWF  2C
0609:  MOVF   22,W
060A:  MOVWF  2B
060B:  CLRF   32
060C:  CLRF   31
060D:  MOVLW  20
060E:  MOVWF  30
060F:  MOVLW  84
0610:  MOVWF  2F
0611:  CALL   37E
0612:  BTFSC  03.0
....................    fan_calis( ); 
0613:  CALL   3BD
....................    // set_pwm1_duty(50); 
....................    } 
.................... if(sicaklik>=40&&sicaklik<45){ 
0614:  CLRF   2E
0615:  CLRF   2D
0616:  MOVLW  20
0617:  MOVWF  2C
0618:  MOVLW  84
0619:  MOVWF  2B
061A:  MOVF   25,W
061B:  MOVWF  32
061C:  MOVF   24,W
061D:  MOVWF  31
061E:  MOVF   23,W
061F:  MOVWF  30
0620:  MOVF   22,W
0621:  MOVWF  2F
0622:  CALL   37E
0623:  BTFSC  03.0
0624:  GOTO   627
0625:  BTFSS  03.2
0626:  GOTO   638
0627:  MOVF   25,W
0628:  MOVWF  2E
0629:  MOVF   24,W
062A:  MOVWF  2D
062B:  MOVF   23,W
062C:  MOVWF  2C
062D:  MOVF   22,W
062E:  MOVWF  2B
062F:  CLRF   32
0630:  CLRF   31
0631:  MOVLW  34
0632:  MOVWF  30
0633:  MOVLW  84
0634:  MOVWF  2F
0635:  CALL   37E
0636:  BTFSC  03.0
....................    fan_calis( ); 
0637:  CALL   3BD
....................    // set_pwm1_duty(75); 
....................    } 
.................... if(sicaklik>=45&&sicaklik<50){ 
0638:  CLRF   2E
0639:  CLRF   2D
063A:  MOVLW  34
063B:  MOVWF  2C
063C:  MOVLW  84
063D:  MOVWF  2B
063E:  MOVF   25,W
063F:  MOVWF  32
0640:  MOVF   24,W
0641:  MOVWF  31
0642:  MOVF   23,W
0643:  MOVWF  30
0644:  MOVF   22,W
0645:  MOVWF  2F
0646:  CALL   37E
0647:  BTFSC  03.0
0648:  GOTO   64B
0649:  BTFSS  03.2
064A:  GOTO   65C
064B:  MOVF   25,W
064C:  MOVWF  2E
064D:  MOVF   24,W
064E:  MOVWF  2D
064F:  MOVF   23,W
0650:  MOVWF  2C
0651:  MOVF   22,W
0652:  MOVWF  2B
0653:  CLRF   32
0654:  CLRF   31
0655:  MOVLW  48
0656:  MOVWF  30
0657:  MOVLW  84
0658:  MOVWF  2F
0659:  CALL   37E
065A:  BTFSC  03.0
....................    fan_calis( ); 
065B:  CALL   3BD
....................    // set_pwm1_duty(90); 
....................    } 
.................... if(sicaklik>50){ 
065C:  CLRF   2E
065D:  CLRF   2D
065E:  MOVLW  48
065F:  MOVWF  2C
0660:  MOVLW  84
0661:  MOVWF  2B
0662:  MOVF   25,W
0663:  MOVWF  32
0664:  MOVF   24,W
0665:  MOVWF  31
0666:  MOVF   23,W
0667:  MOVWF  30
0668:  MOVF   22,W
0669:  MOVWF  2F
066A:  CALL   37E
066B:  BTFSC  03.0
....................    fan_calis( ); 
066C:  CALL   3BD
....................    // set_pwm1_duty(100); 
....................     
....................    } 
....................    lcd_gotoxy(10,1); 
066D:  MOVLW  0A
066E:  MOVWF  39
066F:  MOVLW  01
0670:  MOVWF  3A
0671:  CALL   11C
....................    printf(lcd_putc,"%5.1f'C",sicaklik); 
0672:  MOVLW  04
0673:  MOVWF  04
0674:  MOVF   25,W
0675:  MOVWF  2E
0676:  MOVF   24,W
0677:  MOVWF  2D
0678:  MOVF   23,W
0679:  MOVWF  2C
067A:  MOVF   22,W
067B:  MOVWF  2B
067C:  MOVLW  01
067D:  MOVWF  2F
067E:  GOTO   419
067F:  MOVLW  27
0680:  MOVWF  38
0681:  CALL   12E
0682:  MOVLW  43
0683:  MOVWF  38
0684:  CALL   12E
....................    delay_ms(100); 
0685:  MOVLW  64
0686:  MOVWF  39
0687:  CALL   012
0688:  GOTO   564
....................    } 
.................... } 
.................... void fan_calis( ){ 
0689:  SLEEP
....................    output_high(pin_c3); 
*
03BD:  BCF    2A.3
03BE:  MOVF   2A,W
03BF:  BSF    03.5
03C0:  MOVWF  07
03C1:  BCF    03.5
03C2:  BSF    07.3
....................    output_low(pin_c1); 
03C3:  BCF    2A.1
03C4:  MOVF   2A,W
03C5:  BSF    03.5
03C6:  MOVWF  07
03C7:  BCF    03.5
03C8:  BCF    07.1
03C9:  RETURN
....................  
....................    } 

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
